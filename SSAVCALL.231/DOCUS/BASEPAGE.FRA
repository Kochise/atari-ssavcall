/// Le ProgHeader et la BasePage //////////////////////////////////////////////

Il y a deux structures:

Le fichier programme, et le programme relog‚ en m‚moire

  Le Fichier                                 En M‚moire

OffSet   0 ProgHead -> --------          Offset   0 BasePage -> --------
                       |      |--,                              |      |---,
                       |      |--+,                             |      |---+,
                       |      |--++,                            |      |---++,
                       |      |--+++,                           |      |   |||
                       |      |  ||||                           |      |   |||
OffSet  28 SectTEXT -> --------  ||||                           --------   |||
                       |      |}-'|||                                      |||
OffSet XXX SectDATA -> --------   |||    OffSet XXX SectTEXT -> -------- <-'||
                       |      |}--'||                           |      |}--'||
OffSet XXX TablSymb -> --------    ||                           --------    ||
                       |      |}---'|                                       ||
OffSet XXX TabReloc -> --------     |    OffSet XXX SectDATA -> -------- <--'|
                       |      |}----'                           |      |}---'|
                       --------                                 --------     |
                                                                             |
                                         OffSet XXX SectBSS  -> -------- <---'
                                                                |      |}----'
                                                                --------

Lorsque le systeme d'exploitation charge un programme, il opere un peu de la
facon suivante:
  -Lecture du ProgHeader
  -Calcul de la m‚moire … r‚server
   Taille Section TEXT+DATA+BSS+BasePage
  -R‚servation de la m‚moire
  -Chargement de la Section TEXT+DATA
  -Effacement de la Section BSS (suivant valeur dans le TPA)
  -Utilisation de la table de relocation pour reloger la Section TEXT
  -Remplissage de la BasePage
  -Saut au d‚but du programme

Le d‚buggeur opere presque de la meme facon. Seulement o— l'OS n'utilise pas la
table symbolique, le d‚buggeur la charge et l'utilise.

1-ProgHeader

  Ce sont les tailles des diff‚rents ‚l‚ments formants le programmes. Vu que le
  fichier les contients les uns … la suite des autres, seules les tailles sont
  utiles.
  WORD 0 : $601A - Instruction BRA PC+$1A
           Pointe le d‚but de la SECTION TEXT
  LONG 1 : Longueur de la SECTION TEXT
           C'est le programme en lui mˆme, avec les diff‚rentes routines.
           Il n'y a ici que ce qui est executable.
  LONG 3 : Longueur de la SECTION DATA
           Ce sont les donn‚es dont le programme a besoin.
           Ce peut etre des tables de Sinus, ou autres...
  LONG 5 : Longueur de la SECTION BSS
           Ce sont les variables.
           Cette partie n'existe pas dans le fichier.
           Au d‚part du programme, de la m‚moire est r‚serv‚e par le systeme
           d'exploitation, et effac‚e.
           Cette partie existe dans uniquement en m‚moire, et contient 0
           partout, au d‚part donc.
  LONG 7 : Longueur du tableau symbolique
           C'est pas toujours le cas, mais cette partie peu exister. Elle suit
           la SECTION DATA dans le fichier.
           Ici se trouve le nom des labels utilis‚s dans l'assembleur. C'est
           utilis‚ essentiellement par les d‚buggeur quand c'est possible.
  LONG 9 : Table de relocation

2-BasePage

  Correspond un peu au ProgHeader, mais plus complet.
  Les diff‚rentes section ne sont pas automatiquement les unes … la suites des
  autres, aussi la BasePage contient les adresses de d‚part des diff‚rentes
  sections, ainsi que leurs tailles.
  L'adresse de la BasePage se trouve au d‚part du programme … (4,SP). En (SP)
  se trouve un LONG nul.

  LONG 1 : Adresse de la TPA
  LONG 2 : Adresse de fin de TPA (exclu, fin de TPA+1)
  LONG 3 : Adresse de la Section TEXT
  LONG 4 : Taille de la Section TEXT
  LONG 5 : Adresse de la Section DATA
  LONG 6 : Taille de la Section DATA
  LONG 7 : Adresse de la Section BSS
  LONG 8 : Taille de la Section BSS
  LONG 9 : Adresse de la DTA
  LONG A : Adresse de la BasePage du processus pŠre
           Dans le cas d'un systeme multitache, la BasePage du programme PŠre
           Dans le cas d'un accessoire, 0
  LONG B : Adresse d'une chaine d'environnement
  BYTE C : Taille de la ligne de Commande
  ...    : La ligne de commande au format C (termin‚e par un octet nul)

La ligne de commande est celle que l'on peut ecrire dans une boite pr‚vue
lorsque l'on d‚marre un TTP ou GTP, ou que l'on donne au systeme d'exploitation
lorsqu'on lui demande d'executer un programme.
Dans la BasePage, elle a un double format, format Pascal (longueur sur un octet
puis la chaine elle meme) et format C (la chaine elle meme termin‚e par un
octet nul), ce qui est tres utile.

